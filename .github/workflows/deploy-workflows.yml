name: Main Deploy Aws Ecs Workflow

#on:
#  workflow_dispatch:
#    inputs:
#      environment:
#        description: 'Environment to run:'
#        type: environment
#        required: true
#        default: 'test'
on:
  push:
    branches:
      - test
env:
  ECR_REPOSITORY: cicd-demo-repo
  ECS_CLUSTER_NAME: cicd-demo-ecs-cluster
  ECS_SERVICE_NAME: cicd-demo-ecs-service
  ECS_TASK_DEFINITION: cicd-demo-task-definition
  ECS_TASK_EXECUTE_ROLE: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole
  ECS_CONTAINER_NAME: cicd-demo-ecs-container
  APP_NAME: cicd-demo-app
  ENV_NAME: test #${{ inputs.environment }}

jobs:
  build-push:
    runs-on: ubuntu-latest
    environment: Develop
    outputs:
      ecs-image: ${{ steps.build-image.outputs.image }}
      ecs-registry: ${{ steps.ecr-login.outputs.registry }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 'v18.20.x'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR repository if it does not exist
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}

      - name: Create ECS cluster if it does not exist
        run: |
          aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} || \
          echo "Cluster ${{ env.ECS_CLUSTER_NAME }} already exists."

      #      - name: Build, tag, and push image to Amazon ECR
      #        id: build-image
      #        env:
      #          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
      #          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
      #          IMAGE_TAG: ${{ github.sha }}
      #        run: |
      #          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Build Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "ECS_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
      #
      #      - name: Scan image with Trivy
      #        uses: aquasecurity/trivy-action@master
      #        with:
      #          image-ref: ${{ steps.build-image.outputs.image }}
      #          format: "table"
      #          severity: "CRITICAL,HIGH"
      #          exit-code: 0
      #
      #      - name: Check Docker best practices with Dockle
      #        uses: erzz/dockle-action@v1
      #        with:
      #          image: ${{ steps.build-image.outputs.image }}
      #          failure-threshold: fatal
      #          exit-code: 0

      - name: Push to ECR
        if: success()
        run: docker push ${{ steps.build-image.outputs.image }}

      #      - name: Deploy updated container image via blue/green deployment to ECS service
      #        uses: silinternational/ecs-deploy@master
      #        with:
      #          aws_access_key_cmd: '--aws-access-key'
      #          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #          aws_secret_key_cmd: '--aws-secret-key'
      #          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #          region_cmd: '--region'
      #          region: ${{ secrets.AWS_REGION }}
      #          cluster_cmd: '--cluster'
      #          cluster: ${{ env.ECS_CLUSTER_NAME }}
      #          image_cmd: '--image'
      #          image: ${{ steps.build-image.outputs.image }}
      #          service_name_cmd: '--service-name'
      #          service_name: ${{ env.ECS_SERVICE_NAME }}
      #          wait_for_success_cmd: '--wait-for-success'
      #          wait_for_success: true
      #
      #      - name: Update ECS task definition JSON
      #        env:
      #          TASK_FAMILY: ${{ env.ECS_TASK_DEFINITION }}
      #          TASK_EXECUTE_ROLE: ${{ env.ECS_TASK_EXECUTE_ROLE }}
      #          TASK_CONTAINER_NAME: ${{ env.ECS_CONTAINER_NAME }}
      #          IMAGE: ${{ steps.build-image.outputs.image }}
      #        run: |
      #          jq '.family = "'${{ env.ECS_TASK_DEFINITION }}'" |
      #             .containerDefinitions[0].name = "'${{ env.ECS_CONTAINER_NAME }}'" |
      #             .containerDefinitions[0].image = "'${{ steps.build-image.outputs.image }}'" |
      #             .executionRoleArn = "'${{ env.ECS_TASK_EXECUTE_ROLE }}'"' ./ecs/create-task-definition.json > ./ecs/create-task-definition-updated.json
      #
      #      - name: Check content task definition file
      #        run:  cat ./ecs/create-task-definition-updated.json
      #
      #      - name: Register ECS Task Definition
      #        id: task-def
      #        uses: aws-actions/amazon-ecs-render-task-definition@v1
      #        with:
      #          task-definition: ./ecs/create-task-definition-updated.json
      #          container-name: ${{ env.ECS_CONTAINER_NAME }}
      #          image: ${{ steps.build-image.outputs.image }}
      #
      #      - name: Update ECS task definition JSON
      #        env:
      #          TASK_FAMILY: ${{ env.ECS_TASK_DEFINITION }}
      #          TASK_EXECUTE_ROLE: ${{ env.ECS_TASK_EXECUTE_ROLE }}
      #          TASK_CONTAINER_NAME: ${{ env.ECS_CONTAINER_NAME }}
      #          IMAGE: ${{ steps.build-image.outputs.image }}
      #        run: |
      #          jq '.family = "'${{ env.ECS_TASK_DEFINITION }}'" |
      #             .containerDefinitions[0].name = "'${{ env.ECS_CONTAINER_NAME }}'" |
      #             .containerDefinitions[0].image = "'${{ steps.build-image.outputs.image }}'" |
      #             .executionRoleArn = "'${{ env.ECS_TASK_EXECUTE_ROLE }}'"' ./ecs/create-task-definition.json > ./ecs/create-task-definition-updated.json
      #
      #      - name: Deploy to Amazon ECS service
      #        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #        with:
      #          task-definition: ${{ steps.task-def.outputs.task-definition }}
      #          service: ${{ env.ECS_SERVICE_NAME }}
      #          cluster: ${{ env.ECS_CLUSTER_NAME }}
      #          wait-for-service-stability: true
      - name: Download ecspresso
        uses: kayac/ecspresso@v2
        with:
          version: v2.3.3

      - name: Substitute environment variables in ecspresso config
        run: |
          envsubst < ecspresso.template.yml > ecspresso.yml

      - name: Update ECS task definition JSON
        env:
          TASK_FAMILY: ${{ env.ECS_TASK_DEFINITION }}
          TASK_EXECUTE_ROLE: ${{ env.ECS_TASK_EXECUTE_ROLE }}
          TASK_CONTAINER_NAME: ${{ env.ECS_CONTAINER_NAME }}
          IMAGE: ${{ steps.build-image.outputs.image }}
        run: |
          jq '.family = "'${{ env.ECS_TASK_DEFINITION }}'" |
             .containerDefinitions[0].name = "'${{ env.ECS_CONTAINER_NAME }}'" |
             .containerDefinitions[0].image = "'${{ steps.build-image.outputs.image }}'" |
             .executionRoleArn = "'${{ env.ECS_TASK_EXECUTE_ROLE }}'"' ./taskdef.json > ./taskdef_updated.json

      - name: Show ecspresso.yml
        run: |
          cat ecspresso.yml
          cat taskdef_updated.json

      - name: Deploy to ECS service
        run: ecspresso deploy --config ecspresso.yml

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ env.ECR_REGISTRY }}

#  deploy:
#    runs-on: ubuntu-latest
#    needs: build-push
#    environment: Develop
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@master
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}

      #      - name: Update ECS task definition JSON
      #        env:
      #          TASK_FAMILY: ${{ env.ECS_TASK_DEFINITION }}
      #          TASK_EXECUTE_ROLE: ${{ env.ECS_TASK_EXECUTE_ROLE }}
      #          TASK_CONTAINER_NAME: ${{ env.ECS_CONTAINER_NAME }}
      #          IMAGE: ${{ env.ECS_IMAGE }}
      #        run: |
      #          jq '.family = "'${{ env.ECS_TASK_DEFINITION }}'" |
      #             .containerDefinitions[0].name = "'${{ env.ECS_CONTAINER_NAME }}'" |
      #             .containerDefinitions[0].image = "'${{ steps.build-image.outputs.image }}'" |
      #             .executionRoleArn = "'${{ env.ECS_TASK_EXECUTE_ROLE }}'"' ./.json > ./ecs/create-task-definition-updated.json

#      - name: Download ecspresso
#        uses: kayac/ecspresso@v2
#        with:
#          version: v2.3.3
#
#      - name: Substitute environment variables in ecspresso config
#        run: |
#          envsubst < ecspresso.template.yml > ecspresso.yml
#
#      - name: Update ECS task definition JSON
#        env:
#          TASK_FAMILY: ${{ env.ECS_TASK_DEFINITION }}
#          TASK_EXECUTE_ROLE: ${{ env.ECS_TASK_EXECUTE_ROLE }}
#          TASK_CONTAINER_NAME: ${{ env.ECS_CONTAINER_NAME }}
#          IMAGE: ${{ needs.build-push.outputs.ecs-image }}
#        run: |
#          jq '.family = "'${{ env.ECS_TASK_DEFINITION }}'" |
#             .containerDefinitions[0].name = "'${{ env.ECS_CONTAINER_NAME }}'" |
#             .containerDefinitions[0].image = "'${{ needs.build-push.outputs.ecs-image }}'" |
#             .executionRoleArn = "'${{ env.ECS_TASK_EXECUTE_ROLE }}'"' ./taskdef.json > ./taskdef_updated.json
#
#      - name: Show ecspresso.yml
#        run: |
#          cat ecspresso.yml
#          cat taskdef_updated.json
#
#      - name: Deploy to ECS service
#        run: ecspresso deploy --config ecspresso.yml
#
#      - name: Logout of Amazon ECR
#        if: always()
#        run: docker logout ${{ needs.build-push.outputs.ecs-registry }}
