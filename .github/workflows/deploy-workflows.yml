name: Main Deploy Aws Ecs Workflow
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run:'
        type: environment
        required: true
        default: 'dev'

env:
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY || github.event.repository.name }}-ecr-${{ inputs.environment }}
  ECS_CLUSTER_NAME: ${{ vars.ECS_CLUSTER_NAME || github.event.repository.name }}-cluster-${{ inputs.environment }}
  ECS_SERVICE_NAME: ${{ vars.ECS_SERVICE_NAME || github.event.repository.name }}-service-${{ inputs.environment }}
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION || github.event.repository.name }}-task-${{ inputs.environment }}
  ECS_CONTAINER_NAME: ${{ vars.ECS_CONTAINER_NAME || github.event.repository.name }}-container-${{ inputs.environment }}

  ECS_TASK_EXECUTE_ROLE: ${{ vars.ECS_TASK_EXECUTE_ROLE || 'ecsTaskExecutionRole' }}
  ECS_PUB_SUBNETS: ${{ vars.ECS_PUB_SUBNETS || ' ' }} #Multiple subnet are separate by comma, such as "subnet-xxx,subnet-xxx,..."
  ECS_SECURITY_GROUP: ${{ vars.ECS_SECURITY_GROUP || ' ' }}
  ECS_VPC_ID: ${{ vars.ECS_VPC_ID || ' ' }}
  ECS_CREATE_NEW_VPC: ${{ vars.ECS_CREATE_NEW_VPC || 'false' }}

  APP_NAME: ${{ github.event.repository.name }}-app

run-name: Deploy to ${{ inputs.environment }} with branch ${{ github.ref_name }} by @${{ github.actor }}
jobs:
  build-infra:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

#      - name: Retrieve default VPC ID and public subnets
#        id: vpc
#        run: |
#          VPC_ID=`aws ec2 describe-vpcs --filters "Name=isDefault, Values=true" --query 'Vpcs[].VpcId' --output text`
#          echo "vpc-id=$VPC_ID" >> "$GITHUB_OUTPUT"
#
#          SUBNET_1=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=default-for-az,Values=true" --query 'Subnets[0].SubnetId' --output text`
#          echo "subnet-one=$SUBNET_1" >> "$GITHUB_OUTPUT"
#
#          SUBNET_2=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=default-for-az,Values=true" --query 'Subnets[1].SubnetId' --output text`
#          echo "subnet-two=$SUBNET_2" >> "$GITHUB_OUTPUT"
#
#      - name: Deploy infrastructure with CloudFormation
#        id: infrastructure-stack
#        uses: aws-actions/aws-cloudformation-github-deploy@v1
#        with:
#          name: ${{ env.APP_NAME }}-infra
#          template: cloudformation-templates/infrastructure.yml
#          role-arn: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-cloudformation-stack-role
#          no-fail-on-empty-changeset: "1"
#          parameter-overrides: >-
#            EnvironmentName=${{ env.ENV_NAME }},
#            VPC=${{ steps.vpc.outputs.vpc-id }},
#            PublicSubnetOne=${{ steps.vpc.outputs.subnet-one }},
#            PublicSubnetTwo=${{ steps.vpc.outputs.subnet-two }}

      - name: Create ECR repository if it does not exist
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ secrets.AWS_REGION }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}

      - name: Create ECS cluster if it does not exist
        run: |
          aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} || \
          echo "Cluster ${{ env.ECS_CLUSTER_NAME }} already exists."

      - name: Create role execute task if it does not exist
        run: |
          aws iam get-role --role-name ${{ env.ECS_TASK_EXECUTE_ROLE }} --region ${{ secrets.AWS_REGION }} || \
          aws iam create-role --role-name ${{ env.ECS_TASK_EXECUTE_ROLE }} --assume-role-policy-document  file://ecs-policy.json --region ${{ secrets.AWS_REGION }}
          aws iam attach-role-policy --role-name ${{ env.ECS_TASK_EXECUTE_ROLE }} --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  build-push:
    runs-on: ubuntu-latest
    needs: build-infra
    environment: ${{ inputs.environment || 'dev' }}
    outputs:
      ecr-registry: ${{ steps.ecr-login.outputs.registry }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 'v18.20.x'

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          AWS_ACCOUNT_ID: ${{ steps.creds.outputs.aws-account-id }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "ECS_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
  
      - name: Scan security image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECS_IMAGE }}
          format: "table"
          severity: "CRITICAL,HIGH"
          exit-code: 0
  
      - name: Check Docker best practices with Dockle
        uses: erzz/dockle-action@v1
        with:
          image: ${{ env.ECS_IMAGE }}
          failure-threshold: fatal
          exit-code: 0

      - name: Push to ECR
        if: success()
        run: docker push ${{ env.ECS_IMAGE }}

      #      - name: Update ECS task definition JSON
      #        env:
      #          TASK_FAMILY: ${{ env.ECS_TASK_DEFINITION }}
      #          TASK_EXECUTE_ROLE: ${{ env.ECS_TASK_EXECUTE_ROLE }}
      #          TASK_CONTAINER_NAME: ${{ env.ECS_CONTAINER_NAME }}
      #          IMAGE: ${{ steps.build-image.outputs.image }}
      #        run: |
      #          jq '.family = "'${{ env.ECS_TASK_DEFINITION }}'" |
      #             .containerDefinitions[0].name = "'${{ env.ECS_CONTAINER_NAME }}'" |
      #             .containerDefinitions[0].image = "'${{ steps.build-image.outputs.image }}'" |
      #             .executionRoleArn = "'${{ env.ECS_TASK_EXECUTE_ROLE }}'"' ./ecs/create-task-definition.json > ./ecs/create-task-definition-updated.json
      #

#      - name: Register ECS Task Definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: taskdef_updated.json
#          container-name: ${{ env.ECS_CONTAINER_NAME }}
#          image: ${{ steps.build-image.outputs.image }}

#      - name: Update ECS task definition JSON
#        env:
#          TASK_FAMILY: ${{ env.ECS_TASK_DEFINITION }}
#          TASK_EXECUTE_ROLE: ${{ env.ECS_TASK_EXECUTE_ROLE }}
#          TASK_CONTAINER_NAME: ${{ env.ECS_CONTAINER_NAME }}
#          IMAGE: ${{ steps.build-image.outputs.image }}
#        run: |
#          jq '.family = "'${{ env.ECS_TASK_DEFINITION }}'" |
#             .containerDefinitions[0].name = "'${{ env.ECS_CONTAINER_NAME }}'" |
#             .containerDefinitions[0].image = "'${{ steps.build-image.outputs.image }}'" |
#             .executionRoleArn = "'${{ env.ECS_TASK_EXECUTE_ROLE }}'"' ./ecs/create-task-definition.json > ./ecs/create-task-definition-updated.json

#      - name: Deploy to Amazon ECS service
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ env.ECS_SERVICE_NAME }}
#          cluster: ${{ env.ECS_CLUSTER_NAME }}
#          wait-for-service-stability: true

      - name: Substitute environment variables in file config
        run: |
          envsubst < task-definition.tpl.json > task-definition.json
          envsubst < service-definition.tpl.json > service-definition.json
          envsubst < ecspresso.tpl.yml > ecspresso.yml

  deploy:
    runs-on: ubuntu-latest
    needs: build-push
    environment: ${{ inputs.environment || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download ecspresso
        uses: kayac/ecspresso@v2
        with:
          version: v2.3.3

      - name: Show ecspresso.yml
        run: |
          cat ecspresso.yml
          cat task-definition.json
          cat service-definition.json

      - name: Deploy to ECS service
        run: ecspresso deploy --config ecspresso.yml --wait

  clear-data:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ secrets.AWS_REGION }}

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"`

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ needs.deploy.needs.build-push.steps.ecr-login.outputs.registry }}