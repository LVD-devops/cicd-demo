name: Main Deploy Aws Ecs Workflow

#on:
#  workflow_dispatch:
#    inputs:
#      environment:
#        description: 'Environment to run:'
#        type: environment
#        required: true
#        default: 'test'
on:
  push:
    branches:
      - test
env:
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY || 'cicd-demo-repo' }}
  ECS_CLUSTER_NAME: ${{ vars.ECS_CLUSTER_NAME || 'cicd-demo-ecs-cluster' }}
  ECS_SERVICE_NAME: ${{ vars.ECS_SERVICE_NAME || 'cicd-demo-ecs-service' }}
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION || 'cicd-demo-task-definition' }}
  ECS_CONTAINER_NAME: ${{ vars.ECS_CONTAINER_NAME || 'cicd-demo-ecs-container' }}
  ECS_TASK_EXECUTE_ROLE: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole
  ECS_PUB_SUBNETS: ${{ vars.ECS_PUB_SUBNETS || ' ' }} #Multiple subnet are separate by comma, such as "subnet-xxx,subnet-xxx,..."
  ECS_SECURITY_GROUP: ${{ vars.ECS_SECURITY_GROUP || ' ' }}
  ECS_VPC_ID: ${{ vars.ECS_VPC_ID || ' ' }}
  ECS_CREATE_NEW_VPC: ${{ vars.ECS_CREATE_NEW_VPC || 'false' }}

  APP_NAME: ${{ github.event.repository.name }}-app
  ENV_NAME: Develop #${{ inputs.environment }}

jobs:
  build-infra:
    runs-on: ubuntu-latest
    environment: Develop
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

#      - name: Retrieve default VPC ID and public subnets
#        id: vpc
#        run: |
#          VPC_ID=`aws ec2 describe-vpcs --filters "Name=isDefault, Values=true" --query 'Vpcs[].VpcId' --output text`
#          echo "vpc-id=$VPC_ID" >> "$GITHUB_OUTPUT"
#
#          SUBNET_1=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=default-for-az,Values=true" --query 'Subnets[0].SubnetId' --output text`
#          echo "subnet-one=$SUBNET_1" >> "$GITHUB_OUTPUT"
#
#          SUBNET_2=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=default-for-az,Values=true" --query 'Subnets[1].SubnetId' --output text`
#          echo "subnet-two=$SUBNET_2" >> "$GITHUB_OUTPUT"
#
#      - name: Deploy infrastructure with CloudFormation
#        id: infrastructure-stack
#        uses: aws-actions/aws-cloudformation-github-deploy@v1
#        with:
#          name: ${{ env.APP_NAME }}-infra
#          template: cloudformation-templates/infrastructure.yml
#          role-arn: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-cloudformation-stack-role
#          no-fail-on-empty-changeset: "1"
#          parameter-overrides: >-
#            EnvironmentName=${{ env.ENV_NAME }},
#            VPC=${{ steps.vpc.outputs.vpc-id }},
#            PublicSubnetOne=${{ steps.vpc.outputs.subnet-one }},
#            PublicSubnetTwo=${{ steps.vpc.outputs.subnet-two }}

      - name: Create ECR repository if it does not exist
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region${{ secrets.AWS_REGION }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}

      - name: Create ECS cluster if it does not exist
        run: |
          aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER_NAME }} --region${{ secrets.AWS_REGION }} || \
          echo "Cluster ${{ env.ECS_CLUSTER_NAME }} already exists."

  build-push:
    runs-on: ubuntu-latest
    needs: build-infra
    environment: Develop
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 'v18.20.x'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      #      - name: Build, tag, and push image to Amazon ECR
      #        id: build-image
      #        env:
      #          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
      #          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
      #          IMAGE_TAG: ${{ github.sha }}
      #        run: |
      #          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Build Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "ECS_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
      #
      #      - name: Scan image with Trivy
      #        uses: aquasecurity/trivy-action@master
      #        with:
      #          image-ref: ${{ steps.build-image.outputs.image }}
      #          format: "table"
      #          severity: "CRITICAL,HIGH"
      #          exit-code: 0
      #
      #      - name: Check Docker best practices with Dockle
      #        uses: erzz/dockle-action@v1
      #        with:
      #          image: ${{ steps.build-image.outputs.image }}
      #          failure-threshold: fatal
      #          exit-code: 0

      - name: Push to ECR
        if: success()
        run: docker push ${{ env.ECS_IMAGE }}
#
#      - name: Update ECS task definition JSON
#        env:
#          TASK_FAMILY: ${{ env.ECS_TASK_DEFINITION }}
#          TASK_EXECUTE_ROLE: ${{ env.ECS_TASK_EXECUTE_ROLE }}
#          TASK_CONTAINER_NAME: ${{ env.ECS_CONTAINER_NAME }}
#          IMAGE: ${{ steps.build-image.outputs.image }}
#        run: |
#          jq '.family = "'${{ env.ECS_TASK_DEFINITION }}'" |
#             .containerDefinitions[0].name = "'${{ env.ECS_CONTAINER_NAME }}'" |
#             .containerDefinitions[0].image = "'${{ steps.build-image.outputs.image }}'" |
#             .executionRoleArn = "'${{ env.ECS_TASK_EXECUTE_ROLE }}'"' ./taskdef.json > ./taskdef_updated.json

#      - name: Deploy updated container image via blue/green deployment to ECS service
#        uses: silinternational/ecs-deploy@master
#        with:
#          aws_access_key_cmd: '--aws-access-key'
#          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws_secret_key_cmd: '--aws-secret-key'
#          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          region_cmd: '--region'
#          region: ${{ secrets.AWS_REGION }}
#          cluster_cmd: '--cluster'
#          cluster: ${{ env.ECS_CLUSTER_NAME }}
#          image_cmd: '--image'
#          image: ${{ steps.build-image.outputs.image }}
##          service_name_cmd: '--service-name'
##          service_name: ${{ env.ECS_SERVICE_NAME }}
#          task_definition_cmd: '--task-definition'
#          task_definition: ${{ env.ECS_TASK_DEFINITION }}
#          task_definition_file_cmd: '--task-definition-file'
#          task_definition_file: 'taskdef_updated.json'
#          wait_for_success_cmd: '--wait-for-success'
#          wait_for_success: true
      #
      #      - name: Update ECS task definition JSON
      #        env:
      #          TASK_FAMILY: ${{ env.ECS_TASK_DEFINITION }}
      #          TASK_EXECUTE_ROLE: ${{ env.ECS_TASK_EXECUTE_ROLE }}
      #          TASK_CONTAINER_NAME: ${{ env.ECS_CONTAINER_NAME }}
      #          IMAGE: ${{ steps.build-image.outputs.image }}
      #        run: |
      #          jq '.family = "'${{ env.ECS_TASK_DEFINITION }}'" |
      #             .containerDefinitions[0].name = "'${{ env.ECS_CONTAINER_NAME }}'" |
      #             .containerDefinitions[0].image = "'${{ steps.build-image.outputs.image }}'" |
      #             .executionRoleArn = "'${{ env.ECS_TASK_EXECUTE_ROLE }}'"' ./ecs/create-task-definition.json > ./ecs/create-task-definition-updated.json
      #

#      - name: Register ECS Task Definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: taskdef_updated.json
#          container-name: ${{ env.ECS_CONTAINER_NAME }}
#          image: ${{ steps.build-image.outputs.image }}

#      - name: Update ECS task definition JSON
#        env:
#          TASK_FAMILY: ${{ env.ECS_TASK_DEFINITION }}
#          TASK_EXECUTE_ROLE: ${{ env.ECS_TASK_EXECUTE_ROLE }}
#          TASK_CONTAINER_NAME: ${{ env.ECS_CONTAINER_NAME }}
#          IMAGE: ${{ steps.build-image.outputs.image }}
#        run: |
#          jq '.family = "'${{ env.ECS_TASK_DEFINITION }}'" |
#             .containerDefinitions[0].name = "'${{ env.ECS_CONTAINER_NAME }}'" |
#             .containerDefinitions[0].image = "'${{ steps.build-image.outputs.image }}'" |
#             .executionRoleArn = "'${{ env.ECS_TASK_EXECUTE_ROLE }}'"' ./ecs/create-task-definition.json > ./ecs/create-task-definition-updated.json

#      - name: Deploy to Amazon ECS service
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ env.ECS_SERVICE_NAME }}
#          cluster: ${{ env.ECS_CLUSTER_NAME }}
#          wait-for-service-stability: true

      - name: Substitute environment variables in file config
        run: |
          envsubst < task-definition.tpl.json > task-definition.json
          envsubst < service-definition.tpl.json > service-definition.json
          envsubst < ecspresso.tpl.yml > ecspresso.yml

      - name: Download ecspresso
        uses: kayac/ecspresso@v2
        with:
          version: v2.3.3

#      - name: Update ECS task definition JSON
#        env:
#          TASK_FAMILY: ${{ env.ECS_TASK_DEFINITION }}
#          TASK_EXECUTE_ROLE: ${{ env.ECS_TASK_EXECUTE_ROLE }}
#          TASK_CONTAINER_NAME: ${{ env.ECS_CONTAINER_NAME }}
#          IMAGE: ${{ steps.build-image.outputs.image }}
#        run: |
#          jq '.family = "'${{ env.ECS_TASK_DEFINITION }}'" |
#             .containerDefinitions[0].name = "'${{ env.ECS_CONTAINER_NAME }}'" |
#             .containerDefinitions[0].image = "'${{ steps.build-image.outputs.image }}'" |
#             .executionRoleArn = "'${{ env.ECS_TASK_EXECUTE_ROLE }}'"' ./taskdef.json > ./taskdef_updated.json
#
      - name: Show ecspresso.yml
        run: |
          cat ecspresso.yml
          cat task-definition.json
          cat service-definition.json

      - name: Deploy to ECS service
        run: ecspresso deploy --config ecspresso.yml

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.ecr-login.outputs.registry }}

#  deploy:
#    runs-on: ubuntu-latest
#    needs: build-push
#    environment: Develop
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@master
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.AWS_REGION }}

      #      - name: Update ECS task definition JSON
      #        env:
      #          TASK_FAMILY: ${{ env.ECS_TASK_DEFINITION }}
      #          TASK_EXECUTE_ROLE: ${{ env.ECS_TASK_EXECUTE_ROLE }}
      #          TASK_CONTAINER_NAME: ${{ env.ECS_CONTAINER_NAME }}
      #          IMAGE: ${{ env.ECS_IMAGE }}
      #        run: |
      #          jq '.family = "'${{ env.ECS_TASK_DEFINITION }}'" |
      #             .containerDefinitions[0].name = "'${{ env.ECS_CONTAINER_NAME }}'" |
      #             .containerDefinitions[0].image = "'${{ steps.build-image.outputs.image }}'" |
      #             .executionRoleArn = "'${{ env.ECS_TASK_EXECUTE_ROLE }}'"' ./.json > ./ecs/create-task-definition-updated.json

#      - name: Download ecspresso
#        uses: kayac/ecspresso@v2
#        with:
#          version: v2.3.3
#
#      - name: Substitute environment variables in ecspresso config
#        run: |
#          envsubst < ecspresso.template.yml > ecspresso.yml
#
#      - name: Update ECS task definition JSON
#        env:
#          TASK_FAMILY: ${{ env.ECS_TASK_DEFINITION }}
#          TASK_EXECUTE_ROLE: ${{ env.ECS_TASK_EXECUTE_ROLE }}
#          TASK_CONTAINER_NAME: ${{ env.ECS_CONTAINER_NAME }}
#          IMAGE: ${{ needs.build-push.outputs.ecs-image }}
#        run: |
#          jq '.family = "'${{ env.ECS_TASK_DEFINITION }}'" |
#             .containerDefinitions[0].name = "'${{ env.ECS_CONTAINER_NAME }}'" |
#             .containerDefinitions[0].image = "'${{ needs.build-push.outputs.ecs-image }}'" |
#             .executionRoleArn = "'${{ env.ECS_TASK_EXECUTE_ROLE }}'"' ./taskdef.json > ./taskdef_updated.json
#
#      - name: Show ecspresso.yml
#        run: |
#          cat ecspresso.yml
#          cat taskdef_updated.json
#
#      - name: Deploy to ECS service
#        run: ecspresso deploy --config ecspresso.yml
#
#      - name: Logout of Amazon ECR
#        if: always()
#        run: docker logout ${{ needs.build-push.outputs.ecs-registry }}
