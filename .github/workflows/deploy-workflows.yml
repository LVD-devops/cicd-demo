name: Deploy Aws Ecs Workflow
run-name: Deploy to ${{ inputs.environment }} with branch ${{ github.ref_name }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to run:"
        type: environment
        required: true
        default: 'dev'
      create_vpc:
        type: boolean
        default: false
        description: "Create new VPC (subnet, security group,..) if you haven't"
env:
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY || github.event.repository.name }}-ecr-${{ inputs.environment }}
  ECS_CLUSTER_NAME: ${{ vars.ECS_CLUSTER_NAME || github.event.repository.name }}-cluster-${{ inputs.environment }}
  ECS_SERVICE_NAME: ${{ vars.ECS_SERVICE_NAME || github.event.repository.name }}-service-${{ inputs.environment }}
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION || github.event.repository.name }}-task-${{ inputs.environment }}
  ECS_CONTAINER_NAME: ${{ vars.ECS_CONTAINER_NAME || github.event.repository.name }}-container-${{ inputs.environment }}

  ECS_TASK_EXECUTE_ROLE: ${{ vars.ECS_TASK_EXECUTE_ROLE || 'ecsTaskExecutionRole' }}
  ECS_PUB_SUBNETS: ${{ vars.ECS_PUB_SUBNETS || ' ' }} #Multiple subnet are separate by comma, such as "subnet-xxx,subnet-xxx,..."
  ECS_SECURITY_GROUP: ${{ vars.ECS_SECURITY_GROUP || ' ' }}
  ECS_VPC_ID: ${{ vars.ECS_VPC_ID || ' ' }}
  ECS_CREATE_NEW_VPC: ${{ vars.ECS_CREATE_NEW_VPC || 'false' }}

  APP_NAME: ${{ github.event.repository.name }}-app

jobs:
  build-infra:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        if: ${{ inputs.create_vpc }}
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        if: ${{ inputs.create_vpc }}
        run: terraform init

      - name: Terraform Apply
        if: ${{ inputs.create_vpc }}
        run: terraform apply -var "aws_region=${{ secrets.AWS_REGION }}" -var "app_name=${{ github.event.repository.name }}" -auto-approve

      - name: Save Terraform outputs
        id: vpc_tf
        if: ${{ inputs.create_vpc }}
        run: |
          echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_OUTPUT
          echo "PUBLIC_SUBNET_ID=$(terraform output -raw public_subnet_id)" >> $GITHUB_OUTPUT
          echo "SECURITY_GROUP_ID=$(terraform output -raw security_group_id)" >> $GITHUB_OUTPUT

      - name: Create ECR repository if it does not exist
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ secrets.AWS_REGION }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}

      - name: Create ECS cluster if it does not exist
        run: |
          aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} || \
          echo "Cluster ${{ env.ECS_CLUSTER_NAME }} already exists."

      - name: Create role execute task if it does not exist
        run: |
          aws iam get-role --role-name ${{ env.ECS_TASK_EXECUTE_ROLE }} --region ${{ secrets.AWS_REGION }} || \
          aws iam create-role --role-name ${{ env.ECS_TASK_EXECUTE_ROLE }} --assume-role-policy-document  file://ecs-policy.json --region ${{ secrets.AWS_REGION }}
          aws iam attach-role-policy --role-name ${{ env.ECS_TASK_EXECUTE_ROLE }} --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"

  build-push:
    runs-on: ubuntu-latest
    needs: build-infra
    environment: ${{ inputs.environment || 'dev' }}
    outputs:
      ecr-registry: ${{ steps.ecr-login.outputs.registry }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 'v18.20.x'

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "ECS_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
  
      - name: Scan security image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECS_IMAGE }}
          format: "table"
          severity: "CRITICAL,HIGH"
          exit-code: 0
  
      - name: Check Docker best practices with Dockle
        uses: erzz/dockle-action@v1
        with:
          image: ${{ env.ECS_IMAGE }}
          failure-threshold: fatal
          exit-code: 0

      - name: Push to ECR
        if: success()
        run: docker push ${{ env.ECS_IMAGE }}

      - name: Substitute environment variables in file config
        run: |
          envsubst < task-definition.tpl.json > task-definition.json
          envsubst < service-definition.tpl.json > service-definition.json
          envsubst < ecspresso.tpl.yml > ecspresso.yml
        env:
          ECS_PUB_SUBNETS: ${{ needs.build-infra.steps.vpc_tf.outputs.PUBLIC_SUBNET_ID || env.ECS_PUB_SUBNETS }}
          ECS_SECURITY_GROUP: ${{ needs.build-infra.steps.vpc_tf.outputs.SECURITY_GROUP_ID || env.ECS_SECURITY_GROUP }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Upload ecs files artifact
        uses: actions/upload-artifact@v4
        with:
          name: ecs-artifact-${{ inputs.environment }}
          overwrite: true
          retention-days: 1
          path: |
            task-definition.json
            service-definition.json
            ecspresso.yml
  deploy:
    runs-on: ubuntu-latest
    needs: build-push
    environment: ${{ inputs.environment || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download ecspresso
        uses: kayac/ecspresso@v2
        with:
          version: v2.3.3

      - name: Download ecs files artifact
        uses: actions/download-artifact@v4
        with:
          name: ecs-artifact-${{ inputs.environment }}
          path: .

      - name: Show ecspresso.yml
        run: |
          cat ecspresso.yml
          cat task-definition.json
          cat service-definition.json

      - name: Deploy to ECS service
        run: ecspresso deploy --config ecspresso.yml --wait

  clear-data:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'dev' }}
    needs: [deploy, build-push]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ secrets.AWS_REGION }}

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ needs.build-push.outputs.ecr-registry }}

      - name: Clear AWS credentials
        if: success()
        run: |
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
